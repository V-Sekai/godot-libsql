Import("env")
import os

import inspect
src_file_path = inspect.getfile(lambda: None)
src_folder_path = os.path.dirname(src_file_path)

import subprocess
old_cwd = os.getcwd()

env.Append(CPPDEFINES=[("SQLITE_ENABLE_RBU", 1)])
env.Append(CPPDEFINES=[("SQLITE_USE_URI", 1)])
env.Append(CPPDEFINES=["SQLITE_ENABLE_JSON1"])
env.Append(CPPDEFINES=["SQLITE_OMIT_DEPRECATED"])
env.Append(CPPDEFINES=["LIBSQL_ENABLE_WASM_RUNTIME"])

thirdparty_misc_dir = "thirdparty/libsql/"
thirdparty_misc_sources = [
    "sqlite3.c",
]
thirdparty_misc_sources = [thirdparty_misc_dir + file for file in thirdparty_misc_sources]

os.chdir("thirdparty/libsql/src/rust/wasmtime-bindings/")
import platform as python_platform

from pathlib import Path

if env["platform"] == "windows" and not env.msvc:
    print(src_folder_path)
    env.Append(LIBPATH=[src_folder_path + "/thirdparty/libsql/src/rust/wasmtime-bindings/target/x86_64-pc-windows-gnu/release"])
    subprocess.check_call(["cargo", "build", "--target", "x86_64-pc-windows-gnu", "--release"])
    env.Append(LIBS=["libwblibsql.a", "userenv"])
elif env["platform"] == "linuxbsd":
    env.Append(LIBPATH=[src_folder_path + "/thirdparty/libsql/src/rust/wasmtime-bindings/target/x86_64-unknown-linux-gnu/release"])
    subprocess.check_call(["cargo", "build", "--target", "x86_64-unknown-linux-gnu", "--release"])
    env.Append(LIBS=["libwblibsql.a", "pthread", "m", "dl"])
elif env["platform"] == "macos":
    env.Append(LIBPATH=[src_folder_path + "/thirdparty/libsql/src/rust/wasmtime-bindings/target/x86_64-apple-darwin/release"])
    subprocess.check_call(["cargo", "build", "--target", "x86_64-apple-darwin", "--release"])
    env.Append(LIBS=["libwblibsql.a", "pthread", "m", "dl"])
elif env["platform"] == "web":
    env.Append(LIBPATH=[src_folder_path + "/thirdparty/libsql/src/rust/wasmtime-bindings/target/x86_64-unknown-linux-gnu/release"])
    subprocess.check_call(["cargo", "build", "--target", "wasm32-unknown-emscripten", "--release"])
    env.Append(LIBS=["libwblibsql.a","pthread", "m", "dl"])

env.Append(CPPPATH=["thirdparty/libsql"])
env.Append(CPPPATH=["thirdparty"])
env.Append(CPPPATH=["#modules/mvsqlite"])

os.chdir(old_cwd)

module_obj = []

env.add_source_files(module_obj, "*.cpp")

env_thirdparty = env.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(module_obj, thirdparty_misc_sources)

env.modules_sources += module_obj
